{
    "contents" : "# Telstra Kaggle competition\n\nlibrary(ggplot2)\nlibrary(randomForest)\nlibrary(xgboost)\nsource(\"multiLogLoss.R\")\n\n#load data\ntrain <- read.csv(\"train.csv\", stringsAsFactors=FALSE)\ntest <- read.csv(\"test.csv\", stringsAsFactors=FALSE)\n#severity type of a warning message coming from the log\nseverity_type <- read.csv(\"severity_type.csv\", stringsAsFactors=FALSE)\n#type of resource related to the main dataset\nresource <- read.csv(\"resource_type.csv\", stringsAsFactors=FALSE)\ncolnames(resource) <- c(\"id\", \"resource\")\n#event type related to the main dataset\nevent <- read.csv(\"event_type.csv\", stringsAsFactors=FALSE)\n#features extracted from log files\nlog_feature <- read.csv(\"log_feature.csv\", stringsAsFactors=FALSE)\nsample_submission <- read.csv(\"sample_submission.csv\", stringsAsFactors=FALSE)\n\n# merge data to 1 dataframe\nmergeDF <- function(x, y){\n  y_train <- y[y$id %in% x$id,]\n  y_train <- aggregate(y_train[-1], by=list(y_train$id), c)\n  colnames(y_train) <- c(\"id\")\n  df <- merge(x, y_train, by= \"id\")\n  return(df)\n}\ndf <- Reduce(mergeDF, list(train, severity_type, resource, event, log_feature))\ncolnames(df) <- c(\"id\", \"location\", \"fault_severity\", \"severity_type\", \"resource\", \"event\", \"log_features\", \"volumes\")\ndf$fault_severity <- as.factor(df$fault_severity)\ndf_test <- Reduce(mergeDF, list(test, severity_type, resource, event, log_feature))\ncolnames(df_test) <- c(\"id\", \"location\", \"severity_type\", \"resource\", \"event\", \"log_features\", \"volumes\")\n\naddResourceColumns = function(df){\n  resource_levels <- levels(factor(unlist(df$resource)))\n  df_res_types <- as.data.frame(do.call(rbind, lapply(lapply(df$resource, factor, resource_levels), table)))\n  colnames(df_res_types) <- gsub('resource_type ', 'res', colnames(df_res_types))\n  event_levels <- levels(factor(unlist(df$event)))\n  df_event_types <- as.data.frame(do.call(rbind, lapply(lapply(df$event, factor, event_levels), table)))\n  colnames(df_event_types) <- gsub('event_type ', 'evt', colnames(df_event_types))\n  df <- cbind(df, df_res_types)\n  df <- cbind(df, df_event_types)\n  return(df)\n}\n#df <- addResourceColumns(df)\n#df_test <- addResourceColumns(df_test)\n\naddResourceLengthColumn = function(df){\n  length <- lapply(df$resource, length)\n  length_df <- data.frame(Reduce(rbind, length))\n  colnames(length_df) <- c(\"res.size\")\n  df <- cbind(df, length_df)\n}\ndf <- addResourceLengthColumn(df)\ndf_test <- addResourceLengthColumn(df_test)\n\naddEventLengthColumn = function(df){\n  length <- lapply(df$event, length)\n  length_df <- data.frame(Reduce(rbind, length))\n  colnames(length_df) <- c(\"event.size\")\n  df <- cbind(df, length_df)\n}\ndf <- addEventLengthColumn(df)\ndf_test <- addEventLengthColumn(df_test)\n\naddLogfeaturesColumn = function(df){\n  length <- lapply(df$log_features, length)\n  length_df <- data.frame(Reduce(rbind, length))\n  colnames(length_df) <- c(\"feat.size\")\n  df <- cbind(df, length_df)\n}\ndf <- addLogfeaturesColumn(df)\ndf_test <- addLogfeaturesColumn(df_test)\n\naddTotalVolColumn = function(df){\n  length <- lapply(df$volumes, sum)\n  length_df <- data.frame(Reduce(rbind, length))\n  colnames(length_df) <- c(\"tot.vol\")\n  df <- cbind(df, length_df)\n}\ndf <- addTotalVolColumn(df)\ndf_test <- addTotalVolColumn(df_test)\n\naddLocationClassColumn = function(df){\n  loc <- round(strtoi(gsub(\"location \", \"\", df$location))/100)\n  locclass_df <- data.frame(Reduce(rbind, loc))  \n  colnames(locclass_df) <- c(\"loc\")  \n  df <- cbind(df, locclass_df)\n}\ndf <- addLocationClassColumn(df)\ndf_test <- addLocationClassColumn(df_test)\n\ndf_save <- df[,c(\"id\", \"location\", \"fault_severity\", \"severity_type\", \"res.size\", \"event.size\", \"feat.size\", \"tot.vol\", \"loc\")]\nwrite.csv(df_save, \"train_merged.csv\", row.names = FALSE)\n\n#fault_severity = output variable\n#ggplot(data = df) + geom_histogram(aes(x=fault_severity))\n\n#severity_type (from logs)\n#ggplot(data = df) + geom_histogram(aes(x=severity_type))\n#ggplot(data = resource_type) + geom_histogram(aes(x=resource_type))\n\nggplot(data=df, aes(x=as.factor(res.size))) + \n  geom_histogram() \n\nggplot(data = df, aes(x=factor(fault_severity), y=feat.size)) + \n  geom_jitter() + geom_boxplot()\n\nset.seed(1)\n\nextractFeatures <- function(data) {\n  #features <- c(\"severity_type\", \"location\", \"event.size\", \"feat.size\", \"tot.vol\", \"loc\")\n  features <- c(\"event.size\", \"feat.size\", \"tot.vol\", \"loc\")\n  fea <- data[,features]\n  fea$severity_type <- as.factor(fea$severity_type)\n  fea$location <- strtoi(gsub('location ', '', fea$location))\n  return(fea)\n}\n\nfeat_train <- extractFeatures(df)\nrf <- randomForest(feat_train, df$fault_severity)\n\nsubmission <- as.data.frame(df_test[, c(\"id\")])\ncolnames(submission) <- c(\"id\")\npredictions <- as.data.frame(predict(rf, extractFeatures(df_test), type=\"prob\"))\nsubmission$predict_0 <- predictions$\"0\"\nsubmission$predict_1 <- predictions$\"1\"\nsubmission$predict_2 <- predictions$\"2\"\n\n#create output\nwrite.csv(submission, file = \"submissions/random_forest_r_submission6.csv\", row.names=FALSE)\n\n\n#xgboost\nfeat_train2 <- feat_train[,c(\"location\", \"event.size\",\"feat.size\",\"tot.vol\",\"loc\")]\nlabels <- as.numeric(levels(df$fault_severity)) [df$fault_severity]\ntrain2<-as.matrix(feat_train2)\ntrain2<- matrix(as.numeric(train2),nrow(train2),ncol(train2))\n\nxgb <- xgboost(data = train2,  \n               label = labels, \n               eta = 0.1,\n               max_depth = 15, \n               nround=25, \n               subsample = 0.5,\n               colsample_bytree = 0.5,\n               seed = 1,\n               eval_metric = \"merror\",\n               objective = \"multi:softprob\",\n               num_class = 12,\n               nthread = 3)\n\ny_pred <- predict(xgb, extractFeatures(df_test), type=\"prob\"))",
    "created" : 1455993599852.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2351783138",
    "id" : "BC0EB957",
    "lastKnownWriteTime" : 1456773079,
    "path" : "~/admin/freelance/kaggle/telstra/telstra.R",
    "project_path" : "telstra.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}