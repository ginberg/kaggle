dat <- all_df[[1]]
for(i in 2:length(all_df)) {
dat <- merge(dat, all_df[[i]], by="id")
}
View(dat)
dat[dat$id==6852,]
dat[dat$id=6852,]
dat[dat$id==6852,]
dat[dat$id==6852,]
dat
View(dat)
str(dat)
log_feature_train <- log_feature[log_feature$id %in% train$id,]
View(log_feature_train)
dat[dat$id==2588,]
View(train)
View(log_feature)
View(event_type)
MyMerge <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1],by=list(y$id),c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
df <- Reduce(MyMerge, list(train, severity_type, resource_type, event_type, log_feature))
mergeDF <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1], by=list(y$id), c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
mergeDF(train, severity_type)
mergeDF <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1], by=list(y_train$id), c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
mergeDF(train, severity_type)
mergeDF <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1], by=list(y_train$id), c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
df <- Reduce(mergeDF, list(train, severity_type, resource_type, event_type, log_feature))
View(df)
colnames(df) <- c("id", "location", "fault_severity", "severity_types", "resource_types", "event_type", "log_features", "volumes")
View(df)
source('~/admin/freelance/kaggle/telstra/telstra.R')
# Telstra Kaggle competition
#load data
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
severity_type <- read.csv("severity_type.csv", stringsAsFactors=FALSE)
resource_type <- read.csv("resource_type.csv", stringsAsFactors=FALSE)
event_type <- read.csv("event_type.csv", stringsAsFactors=FALSE)
log_feature <- read.csv("log_feature.csv", stringsAsFactors=FALSE)
sample_submission <- read.csv("sample_submission.csv", stringsAsFactors=FALSE)
# merge data to 1 dataframe
mergeDF <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1], by=list(y_train$id), c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
df <- Reduce(mergeDF, list(train, severity_type, resource_type, event_type, log_feature))
colnames(df) <- c("id", "location", "fault_severity", "severity_type", "resource_types", "event_type", "log_features", "volumes")
View(df)
str(df)
str(df$resource_types)
class(df$resource_types)
library(ggplot2)
ggplot(data = df) + geom_histogram(aes(x=severity_type, y=freq))
ggplot(data = df) + geom_histogram(aes(x=severity_type))
ggplot(data = df) + geom_histogram(aes(x=fault_severity))
?write.csv
# Telstra Kaggle competition
library(ggplot2)
library(randomForest)
source("multiLogLoss.R")
#load data
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
#severity type of a warning message coming from the log
severity_type <- read.csv("severity_type.csv", stringsAsFactors=FALSE)
#type of resource related to the main dataset
resource <- read.csv("resource_type.csv", stringsAsFactors=FALSE)
colnames(resource) <- c("id", "resource")
#event type related to the main dataset
event <- read.csv("event_type.csv", stringsAsFactors=FALSE)
#features extracted from log files
log_feature <- read.csv("log_feature.csv", stringsAsFactors=FALSE)
sample_submission <- read.csv("sample_submission.csv", stringsAsFactors=FALSE)
# merge data to 1 dataframe
mergeDF <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1], by=list(y_train$id), c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
df <- Reduce(mergeDF, list(train, severity_type, resource, event, log_feature))
colnames(df) <- c("id", "location", "fault_severity", "severity_type", "resource", "event", "log_features", "volumes")
df$fault_severity <- as.factor(df$fault_severity)
df_test <- Reduce(mergeDF, list(test, severity_type, resource, event, log_feature))
colnames(df_test) <- c("id", "location", "severity_type", "resource", "event", "log_features", "volumes")
addResourceColumns = function(df){
resource_levels <- levels(factor(unlist(df$resource)))
df_res_types <- as.data.frame(do.call(rbind, lapply(lapply(df$resource, factor, resource_levels), table)))
colnames(df_res_types) <- gsub('resource_type ', 'res', colnames(df_res_types))
event_levels <- levels(factor(unlist(df$event)))
df_event_types <- as.data.frame(do.call(rbind, lapply(lapply(df$event, factor, event_levels), table)))
colnames(df_event_types) <- gsub('event_type ', 'evt', colnames(df_event_types))
df <- cbind(df, df_res_types)
df <- cbind(df, df_event_types)
return(df)
}
df <- addResourceColumns(df)
df_test <- addResourceColumns(df_test)
addResourceLengthColumn = function(df){
length <- lapply(df$resource, length)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("res.size")
df <- cbind(df, length_df)
}
df <- addResourceLengthColumn(df)
df_test <- addResourceLengthColumn(df_test)
addEventLengthColumn = function(df){
length <- lapply(df$event, length)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("event.size")
df <- cbind(df, length_df)
}
df <- addEventLengthColumn(df)
df_test <- addEventLengthColumn(df_test)
addLogfeaturesColumn = function(df){
length <- lapply(df$log_features, length)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("feat.size")
df <- cbind(df, length_df)
}
df <- addLogfeaturesColumn(df)
df_test <- addLogfeaturesColumn(df_test)
addTotalVolColumn = function(df){
length <- lapply(df$volumes, sum)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("tot.vol")
df <- cbind(df, length_df)
}
df <- addTotalVolColumn(df)
df_test <- addTotalVolColumn(df_test)
write.csv(df, "train_merged.csv")
View(df)
df_save <- df[,c("id", "location", "fault_severity", "severity_type", "res.size", "event.size", "feat.size", "tot.vol")]
View(df_save)
write.csv(df_save, "train_merged.csv")
install.packages("rvest")
library(rvest)
url <- "http://live.ultimate.dk/desktop/front/?eventid=2021049&language=nl"
data <- read_html(url)
resultsTable <- data %>% html_nodes("table.leaderboard_table_results")
rows <- resultsTable %>% html_nodes("tr")
for(i in 1:length(rows)){
tds <- rows[i] %>% html_nodes("td")
print(tds[4] %>% html_text)
print(tds[10] %>% html_text)
}
installed.packages()
installed.packages()[,1]
if (!is.element("rvest", installed.packages()[,1]))
install.packages("rvest", dep = TRUE)
if (!is.element("rvest", installed.packages()[,1]))
install.packages("rvest", dep = TRUE)
df$row.names
df
rownames(df)
rownames(df) <- NULL
View(df)
rownames(df) <- NULL
df_save <- df[,c("id", "location", "fault_severity", "severity_type", "res.size", "event.size", "feat.size", "tot.vol")]
write.csv(df_save, "train_merged.csv")
View(df_save)
rownames(df_save)
rownames(df) <- NULL
df_save <- df[,c("id", "location", "fault_severity", "severity_type", "res.size", "event.size", "feat.size", "tot.vol")]
rownames(df_save) <- NULL
write.csv(df_save, "train_merged.csv")
rownames(df_save)
row.names(df_save)
row.names(df_save) <- NULL
row.names(df_save)
row.names(df_save)<-NULL
row.names(df_save)
View(df_save)
?write.csv
df_save <- df[,c("id", "location", "fault_severity", "severity_type", "res.size", "event.size", "feat.size", "tot.vol")]
write.csv(df_save, "train_merged.csv", row.names = FALSE)
df$location
gsub("location ", "", df$location)
addLocationClassColumn = function(df){
loc <- gsub("location ", "", df$location)
locclass_df <- data.frame(Reduce(rbind, loc))
colnames(length_df) <- c("loc")
df <- cbind(df, length_df)
}
df <- addLocationClassColumn(df)
df_test <- addLocationClassColumn(df_test)
addLocationClassColumn = function(df){
loc <- gsub("location ", "", df$location)
locclass_df <- data.frame(Reduce(rbind, loc))
colnames(locclass_df) <- c("loc")
df <- cbind(df, locclass_df)
}
df <- addLocationClassColumn(df)
df_test <- addLocationClassColumn(df_test)
View(df)
601/ 100
round(601/ 100)
round(2/ 100)
loc <- gsub("location ", "", df$location)
loc
strtoint("756")
strtoi("756")
strtoi("756")/100
round(strtoi("756")/100)
lapply(loc, round(strtoi()/100))
lapply(loc, round(strtoi(loc[i])/100))
round(strtoi("756")/100)
loc[0]
loc[1]
round(strtoi(loc[i])/100)
locclass_df <- data.frame(Reduce(rbind, loc))
colnames(locclass_df) <- c("loc")
locclass_df
locclass_df$loc
class(locclass_df$loc)
class(list)
class(loc)
strtoin(loc)
strtoi(loc)
round(strtoi(loc)/100)
loc <- round(strtoi(gsub("location ", "", df$location))/100)
locclass_df <- data.frame(Reduce(rbind, loc))
colnames(locclass_df) <- c("loc")
View(locclass_df)
# Telstra Kaggle competition
library(ggplot2)
library(randomForest)
source("multiLogLoss.R")
#load data
train <- read.csv("train.csv", stringsAsFactors=FALSE)
test <- read.csv("test.csv", stringsAsFactors=FALSE)
#severity type of a warning message coming from the log
severity_type <- read.csv("severity_type.csv", stringsAsFactors=FALSE)
#type of resource related to the main dataset
resource <- read.csv("resource_type.csv", stringsAsFactors=FALSE)
colnames(resource) <- c("id", "resource")
#event type related to the main dataset
event <- read.csv("event_type.csv", stringsAsFactors=FALSE)
#features extracted from log files
log_feature <- read.csv("log_feature.csv", stringsAsFactors=FALSE)
sample_submission <- read.csv("sample_submission.csv", stringsAsFactors=FALSE)
# merge data to 1 dataframe
mergeDF <- function(x, y){
y_train <- y[y$id %in% x$id,]
y_train <- aggregate(y_train[-1], by=list(y_train$id), c)
colnames(y_train) <- c("id")
df <- merge(x, y_train, by= "id")
return(df)
}
df <- Reduce(mergeDF, list(train, severity_type, resource, event, log_feature))
colnames(df) <- c("id", "location", "fault_severity", "severity_type", "resource", "event", "log_features", "volumes")
df$fault_severity <- as.factor(df$fault_severity)
df_test <- Reduce(mergeDF, list(test, severity_type, resource, event, log_feature))
colnames(df_test) <- c("id", "location", "severity_type", "resource", "event", "log_features", "volumes")
addResourceColumns = function(df){
resource_levels <- levels(factor(unlist(df$resource)))
df_res_types <- as.data.frame(do.call(rbind, lapply(lapply(df$resource, factor, resource_levels), table)))
colnames(df_res_types) <- gsub('resource_type ', 'res', colnames(df_res_types))
event_levels <- levels(factor(unlist(df$event)))
df_event_types <- as.data.frame(do.call(rbind, lapply(lapply(df$event, factor, event_levels), table)))
colnames(df_event_types) <- gsub('event_type ', 'evt', colnames(df_event_types))
df <- cbind(df, df_res_types)
df <- cbind(df, df_event_types)
return(df)
}
#df <- addResourceColumns(df)
#df_test <- addResourceColumns(df_test)
addResourceLengthColumn = function(df){
length <- lapply(df$resource, length)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("res.size")
df <- cbind(df, length_df)
}
df <- addResourceLengthColumn(df)
df_test <- addResourceLengthColumn(df_test)
addEventLengthColumn = function(df){
length <- lapply(df$event, length)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("event.size")
df <- cbind(df, length_df)
}
df <- addEventLengthColumn(df)
df_test <- addEventLengthColumn(df_test)
addLogfeaturesColumn = function(df){
length <- lapply(df$log_features, length)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("feat.size")
df <- cbind(df, length_df)
}
df <- addLogfeaturesColumn(df)
df_test <- addLogfeaturesColumn(df_test)
addTotalVolColumn = function(df){
length <- lapply(df$volumes, sum)
length_df <- data.frame(Reduce(rbind, length))
colnames(length_df) <- c("tot.vol")
df <- cbind(df, length_df)
}
df <- addTotalVolColumn(df)
df_test <- addTotalVolColumn(df_test)
addLocationClassColumn = function(df){
loc <- round(strtoi(gsub("location ", "", df$location))/100)
locclass_df <- data.frame(Reduce(rbind, loc))
colnames(locclass_df) <- c("loc")
df <- cbind(df, locclass_df)
}
df <- addLocationClassColumn(df)
df_test <- addLocationClassColumn(df_test)
View(df)
extractFeatures <- function(data) {
features <- c("severity_type", "location", "event.size", "feat.size", "tot.vol", "loc")
fea <- data[,features]
fea$severity_type <- as.factor(fea$severity_type)
fea$location <- strtoi(gsub('location ', '', fea$location))
return(fea)
}
feat_train <- extractFeatures(df)
rf <- randomForest(feat_train, df$fault_severity)
submission <- as.data.frame(df_test[, c("id")])
colnames(submission) <- c("id")
predictions <- as.data.frame(predict(rf, extractFeatures(df_test), type="prob"))
submission$predict_0 <- predictions$"0"
submission$predict_1 <- predictions$"1"
submission$predict_2 <- predictions$"2"
#create output
write.csv(submission, file = "submissions/random_forest_r_submission5.csv", row.names=FALSE)
ggplot(data = df, aes(x=factor(fault_severity), y=loc)) +
geom_jitter(alpha=0.1) + geom_boxplot(alpha=0.1)
ggplot(data = df, aes(x=factor(fault_severity), y=loc)) +
geom_jitter() + geom_boxplot()
ggplot(data = df, aes(x=factor(fault_severity), y=tot.vol)) +
geom_jitter() + geom_boxplot()
ggplot(data = df, aes(x=factor(fault_severity), y=feat.size)) +
geom_jitter() + geom_boxplot()
extractFeatures <- function(data) {
features <- c("severity_type", "event.size", "feat.size", "tot.vol", "loc")
fea <- data[,features]
fea$severity_type <- as.factor(fea$severity_type)
#fea$location <- strtoi(gsub('location ', '', fea$location))
return(fea)
}
feat_train <- extractFeatures(df)
rf <- randomForest(feat_train, df$fault_severity)
submission <- as.data.frame(df_test[, c("id")])
colnames(submission) <- c("id")
predictions <- as.data.frame(predict(rf, extractFeatures(df_test), type="prob"))
submission$predict_0 <- predictions$"0"
submission$predict_1 <- predictions$"1"
submission$predict_2 <- predictions$"2"
#create output
write.csv(submission, file = "submissions/random_forest_r_submission6.csv", row.names=FALSE)
extractFeatures <- function(data) {
features <- c("severity_type", "location", "event.size", "feat.size", "tot.vol", "loc")
fea <- data[,features]
fea$severity_type <- as.factor(fea$severity_type)
fea$location <- strtoi(gsub('location ', '', fea$location))
return(fea)
}
feat_train <- extractFeatures(df)
feat_train
head(feat_train)
df_sev <- df[df$fault_severity==2,]
df_sev
View(df_sev)
df_sev1 <- df[df$fault_severity==1,]
View(df_sev1)
df_sev0 <- df[df$fault_severity==0,]
View(df_sev0)
View(df_sev)
library(randomForest)
library(xgboost)
install.packages("xgboost")
library(xgboost)
xgb <- xgboost(data = feat_train,
label = df$fault_severity,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
extractFeatures <- function(data) {
#features <- c("severity_type", "location", "event.size", "feat.size", "tot.vol", "loc")
features <- c("event.size", "feat.size", "tot.vol", "loc")
fea <- data[,features]
fea$severity_type <- as.factor(fea$severity_type)
fea$location <- strtoi(gsub('location ', '', fea$location))
return(fea)
}
feat_train <- extractFeatures(df)
View(feat_train)
feat_train[,!c("severity_type")]
feat_train[,!"severity_type"]
feat_train[,c("severity_type")]
feat_train[,c("location", "event.size","feat.size","tot.vol","loc")]
feat_train2 < feat_train[,c("location", "event.size","feat.size","tot.vol","loc")]
xgb <- xgboost(data = feat_train2,
label = df$fault_severity,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3
)
feat_train2 <- feat_train[,c("location", "event.size","feat.size","tot.vol","loc")]
xgb <- xgboost(data = feat_train2,
label = df$fault_severity,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
)
df$fault_severity
class(df$fault_severity)
as.numeric(levels(df$fault_severity))[df$fault_severity]
class(as.numeric(levels(df$fault_severity))[df$fault_severity])
feat_train2 <- feat_train[,c("location", "event.size","feat.size","tot.vol","loc")]
labels <- class(as.numeric(levels(df$fault_severity))[df$fault_severity])df$fault_severity
xgb <- xgboost(data = feat_train2,
label = labels,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3)
str(feat_train2)
df[,-1]
head(df[,-1])
train2<-as.matrix(feat_train2)
train2<- matrix(as.numeric(train2),nrow(train2),ncol(train2))
View(train2)
xgb <- xgboost(data = train2,
label = labels,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3)
dim(train2)
dim(labels)
labels <- as.numeric(levels(df$fault_severity))[df$fault_severity])
labels <- as.numeric(levels(df$fault_severity)) [df$fault_severity]
labels
dim(labels)
xgb <- xgboost(data = train2,
label = labels,
eta = 0.1,
max_depth = 15,
nround=25,
subsample = 0.5,
colsample_bytree = 0.5,
seed = 1,
eval_metric = "merror",
objective = "multi:softprob",
num_class = 12,
nthread = 3)
y_pred <- predict(xgb, extractFeatures(df_test), type="prob"))
predict(xgb, extractFeatures(df_test), type="prob"))
predict(xgb, extractFeatures(df_test), type="prob")
predict(xgb, extractFeatures(df_test))
predict(xgb, data.matrix(df_test))
